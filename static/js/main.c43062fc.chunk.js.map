{"version":3,"sources":["components/instructions.js","utils/index.js","helpers/transaction-data.js","components/transaction-history.js","components/total-rewards.js","App.js","serviceWorker.js","index.js"],"names":["Instructions","id","href","React","Component","calculateRewards","purchaseTotal","rewardPoints","transactions","customer","date","TransactionHistory","map","transaction","i","key","TotalRewards","props","compileRewardTotals","aggregateSales","januarySales","februarySales","marchSales","aggregateTotal","januaryTotal","februaryTotal","marchTotal","rewardsPoints","rewards","qty","includes","Object","keys","forEach","push","state","aggregateTransactions","januaryTransactions","februaryTransactions","marchTransactions","monthData","this","setState","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c43062fc.chunk.js","sourcesContent":["import React from 'react'\n\nclass Instructions extends React.Component {\n    render () {\n        return (\n            <div id=\"noheader\">\n                <h3>Assignment Instructions</h3>\n                <p>A retailer offers a rewards program to its customers, awarding points based on each recorded purchase.</p>\n                <p>A customer receives 2 points for every dollar spent over $100 in each transaction, \n                    plus 1 point for every dollar spent over $50 in each transaction.</p>\n                <p>(e.g. a $120 purchase = 2x$20 + 1x$50 = 90 points)</p>\n                <p>Given a record of every transaction during a three month period, calculate the reward points earned\n                    for each customer per month and total.\n                </p>\n                <br />\n                <p>Solution by James Mellish</p>\n                <a href='https://www.github.com/Mellishkimo'>Github</a>\n            </div>\n        )\n    }\n}\n\nexport default Instructions","export const calculateRewards = purchaseTotal => {\n    var rewardPoints = 0\n\n    if (purchaseTotal > 100) {\n        var difference = purchaseTotal - 100\n        rewardPoints = (difference * 2) + 50\n    }\n    else if (purchaseTotal > 50) {\n        rewardPoints = purchaseTotal - 50\n    }\n\n    return rewardPoints\n}","export const transactions = [\n    {customer: 'Kamahl F.', date: '2/21/2020', purchaseTotal: 120 },\n    {customer: 'Kamahl F.', date: '1/25/2020', purchaseTotal: 270 },\n    {customer: 'Kamahl F.', date: '3/9/2020', purchaseTotal: 20 },\n    {customer: 'Kamahl F.', date: '1/30/2020', purchaseTotal: 80 },\n    {customer: 'Marianne O.', date: '2/25/2020', purchaseTotal: 100 },\n    {customer: 'Marianne O.', date: '2/12/2020', purchaseTotal: 107 },\n    {customer: 'Marianne O.', date: '3/5/2020', purchaseTotal: 14 },\n    {customer: 'Shelby S.', date: '1/13/2020', purchaseTotal: 114 },\n    {customer: 'Shelby S.', date: '3/11/2020', purchaseTotal: 189 },\n    {customer: 'Gordan C.', date: '2/22/2020', purchaseTotal: 35 },\n    {customer: 'Gordan C.', date: '3/17/2020', purchaseTotal: 56 },\n    {customer: 'Gordan C.', date: '3/29/2020', purchaseTotal: 5 },\n    {customer: 'Terry W.', date: '1/1/2020', purchaseTotal: 463 },\n    {customer: 'Simon X.', date: '1/7/2020', purchaseTotal: 81 },\n    {customer: 'Simon X.', date: '2/2/2020', purchaseTotal: 220 },\n]","import React from 'react'\nimport { calculateRewards } from '../utils/index'\nimport { transactions } from '../helpers/transaction-data'\n\nclass TransactionHistory extends React.Component {\n\n    render () {\n        return (\n            <div>\n                <h2>Transaction History</h2>\n                <table>\n                    <thead>\n                        <tr>\n                            <th>Date</th>\n                            <th>Customer Name</th>\n                            <th>Purchase Total</th>\n                            <th>Rewards Earned</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {transactions.map((transaction, i) => (\n                            <tr key={i}>\n                                <td>{transaction.date}</td>\n                                <td>{transaction.customer}</td>\n                                <td>${transaction.purchaseTotal}</td>\n                                <td>{`${calculateRewards(transaction.purchaseTotal)} points`}</td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}\n\nexport default TransactionHistory","import React from 'react'\nimport { transactions } from '../helpers/transaction-data'\nimport { calculateRewards } from '../utils/index'\n\nclass TotalRewards extends React.Component {\n    constructor (props) {\n        super(props)\n        this.state = {\n            aggregateTransactions: [],\n            januaryTransactions: [],\n            februaryTransactions: [],\n            marchTransactions: []\n        }\n    }\n\n    compileRewardTotals = (transactions) => {\n        const aggregateSales = {}\n        const januarySales = {}\n        const februarySales = {}\n        const marchSales = {}\n\n        const aggregateTotal = []\n        const januaryTotal = []\n        const februaryTotal = []\n        const marchTotal = []\n\n        transactions.map(transaction => {\n            const customer = transaction.customer\n            const rewardsPoints = calculateRewards(transaction.purchaseTotal)\n\n            if (!aggregateSales[customer]) {\n                aggregateSales[customer] = { rewards: 0, qty: 0, purchaseTotal: 0 }\n            }\n            aggregateSales[customer] = {\n                customer: `${customer}`,\n                rewards: aggregateSales[customer].rewards + rewardsPoints,\n                qty: aggregateSales[customer].qty + 1,\n                purchaseTotal: aggregateSales[customer].purchaseTotal + transaction.purchaseTotal\n            }\n\n            if (transaction.date[0].includes('1')) {\n                if (!januarySales[customer]) {\n                    januarySales[customer] = { rewards: 0, qty: 0, purchaseTotal: 0 }\n                }\n                januarySales[customer] = {\n                    customer: `${customer}`,\n                    rewards: januarySales[customer].rewards + rewardsPoints,\n                    qty: januarySales[customer].qty + 1,\n                    purchaseTotal: januarySales[customer].purchaseTotal + transaction.purchaseTotal\n                }\n            }\n            if (transaction.date[0].includes('2')) {\n                if (!februarySales[customer]) {\n                    februarySales[customer] = { rewards: 0, qty: 0, purchaseTotal: 0 }\n                }\n                februarySales[customer] = {\n                    customer: `${customer}`,\n                    rewards: februarySales[customer].rewards + rewardsPoints,\n                    qty: februarySales[customer].qty + 1,\n                    purchaseTotal: februarySales[customer].purchaseTotal + transaction.purchaseTotal\n                }\n            }\n            if (transaction.date[0].includes('3')) {\n                if (!marchSales[customer]) {\n                    marchSales[customer] = { rewards: 0, qty: 0, purchaseTotal: 0 }\n                }\n                marchSales[customer] = {\n                    customer: `${customer}`,\n                    rewards: marchSales[customer].rewards + rewardsPoints,\n                    qty: marchSales[customer].qty + 1,\n                    purchaseTotal: marchSales[customer].purchaseTotal + transaction.purchaseTotal\n                }\n            }\n        })\n        Object.keys(aggregateSales).forEach(customer => {\n            aggregateTotal.push(aggregateSales[customer])\n        })\n        Object.keys(januarySales).forEach(customer => {\n            januaryTotal.push(januarySales[customer])\n        })\n        Object.keys(februarySales).forEach(customer => {\n            februaryTotal.push(februarySales[customer])\n        })\n        Object.keys(marchSales).forEach(customer => {\n            marchTotal.push(marchSales[customer])\n        })\n        return {\n            aggregateTotal,\n            januaryTotal,\n            februaryTotal,\n            marchTotal\n        }\n    }\n    componentDidMount () {\n        const monthData = this.compileRewardTotals(transactions)\n        this.setState({\n            aggregateTransactions: monthData.aggregateTotal,\n            januaryTransactions: monthData.januaryTotal,\n            februaryTransactions: monthData.februaryTotal,\n            marchTransactions: monthData.marchTotal\n        })\n        \n    }\n\n    render () {\n        const { aggregateTransactions, januaryTransactions, februaryTransactions, marchTransactions } = this.state\n        \n\n        return (\n            <div>\n                <div id=\"headspace\">\n                    <h2>January Rewards Totals</h2>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Customer Name</th>\n                                <th>Number of Purchases</th>\n                                <th>Total Expenditure for Month</th>\n                                <th>Total Rewards for Month</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {januaryTransactions.map((transaction, i) => (\n                                <tr key={i} >\n                                    <td>{transaction.customer}</td>\n                                    <td>{transaction.qty}</td>\n                                    <td>${transaction.purchaseTotal}</td>\n                                    <td>{`${transaction.rewards} points`}</td>                            </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                </div>\n                <div id=\"headspace\">\n                    <h2>February Rewards Totals</h2>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Customer Name</th>\n                                <th>Number of Purchases</th>\n                                <th>Total Expenditure for Month</th>\n                                <th>Total Rewards for Month</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {februaryTransactions.map((transaction, i) => (\n                                <tr key={i}>\n                                    <td>{transaction.customer}</td>\n                                    <td>{transaction.qty}</td>\n                                    <td>${transaction.purchaseTotal}</td>\n                                    <td>{`${transaction.rewards} points`}</td>                            </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                </div>\n                <div id=\"headspace\">\n                    <h2>March Rewards Totals</h2>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Customer Name</th>\n                                <th>Number of Purchases</th>\n                                <th>Total Expenditure for Month</th>\n                                <th>Total Rewards for Month</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {marchTransactions.map((transaction, i) => (\n                                <tr key={i}>\n                                    <td>{transaction.customer}</td>\n                                    <td>{transaction.qty}</td>\n                                    <td>${transaction.purchaseTotal}</td>\n                                    <td>{`${transaction.rewards} points`}</td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                </div>\n                <div id=\"headspace\">\n                    <h2>Total Rewards Earned Per Customer</h2>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Customer Name</th>\n                                <th>Number of Purchases</th>\n                                <th>Total Expenditure</th>\n                                <th>Total Rewards Earned</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {aggregateTransactions.map((transaction, i) => (\n                                <tr key={i}>\n                                    <td>{transaction.customer}</td>\n                                    <td>{transaction.qty}</td>\n                                    <td>${transaction.purchaseTotal}</td>\n                                    <td>{`${transaction.rewards} points`}</td>                            \n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default TotalRewards","import React from 'react';\nimport './App.css';\nimport Instructions from './components/instructions';\nimport TransactionHistory from './components/transaction-history';\nimport TotalRewards from './components/total-rewards'\n\nclass App extends React.Component {\n  render () {\n  return (\n    <div id=\"noheader\">\n        <div id=\"container\">\n          <Instructions />\n        </div>\n        <div>\n          <TransactionHistory />\n        </div>\n        <div>\n          <TotalRewards />\n        </div>\n    </div>\n  )\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}